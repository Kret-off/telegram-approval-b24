const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: false, // –û—Ç–∫–ª—é—á–∞–µ–º polling, –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
});

// –ö—ç—à –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
let botInfoCache = null;
let botInfoCacheTime = 0;
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

class TelegramService {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo() {
    try {
      const now = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (botInfoCache && (now - botInfoCacheTime) < CACHE_TTL) {
        return botInfoCache;
      }

      const info = await bot.getMe();
      botInfoCache = info;
      botInfoCacheTime = now;
      
      logger.debug('Bot info retrieved', { bot_info: info });
      return info;
    } catch (error) {
      logger.logError(error, { context: 'getBotInfo' });
      throw error;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
  async setWebhook(webhookUrl) {
    try {
      const result = await bot.setWebhook(webhookUrl);
      logger.info('Webhook set successfully', { webhook_url: webhookUrl, result });
      return result;
    } catch (error) {
      logger.logError(error, { context: 'setWebhook', webhook_url: webhookUrl });
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ webhook
  async deleteWebhook() {
    try {
      const result = await bot.deleteWebhook();
      logger.info('Webhook deleted successfully', { result });
      return result;
    } catch (error) {
      logger.logError(error, { context: 'deleteWebhook' });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
  async getWebhookInfo() {
    try {
      const info = await bot.getWebhookInfo();
      logger.debug('Webhook info retrieved', { webhook_info: info });
      return info;
    } catch (error) {
      logger.logError(error, { context: 'getWebhookInfo' });
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º
  async sendApprovalMessage(messageData) {
    try {
      const {
        approval_id,
        document_title,
        document_url,
        message_text,
        button_approve,
        button_reject,
        approver_telegram_id,
      } = messageData;

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = this.formatApprovalMessage({
        document_title,
        document_url,
        message_text,
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: button_approve,
              callback_data: `approve:${approval_id}`,
            },
            {
              text: button_reject,
              callback_data: `reject:${approval_id}`,
            },
          ],
        ],
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const result = await bot.sendMessage(approver_telegram_id, messageText, {
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard,
        disable_web_page_preview: false,
      });

      logger.logBusiness('approval_message_sent', {
        approval_id,
        telegram_user_id: approver_telegram_id,
        message_id: result.message_id,
        chat_id: result.chat.id,
      });

      return {
        success: true,
        message_id: result.message_id,
        chat_id: result.chat.id,
        result,
      };
    } catch (error) {
      logger.logError(error, {
        context: 'sendApprovalMessage',
        message_data: messageData,
      });
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º
  async updateApprovalMessage(updateData) {
    try {
      const {
        chat_id,
        message_id,
        approval_id,
        action,
        responder_name,
      } = updateData;

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const updatedText = this.formatUpdatedApprovalMessage({
        approval_id,
        action,
        responder_name,
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const result = await bot.editMessageText(updatedText, {
        chat_id,
        message_id,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ',
                callback_data: 'completed',
              },
            ],
          ],
        },
      });

      logger.logBusiness('approval_message_updated', {
        approval_id,
        chat_id,
        message_id,
        action,
        responder_name,
      });

      return {
        success: true,
        result,
      };
    } catch (error) {
      logger.logError(error, {
        context: 'updateApprovalMessage',
        update_data: updateData,
      });
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
  async sendCancellationMessage(cancellationData) {
    try {
      const { chat_id, message_id, approval_id } = cancellationData;

      const cancellationText = this.formatCancellationMessage({ approval_id });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const result = await bot.editMessageText(cancellationText, {
        chat_id,
        message_id,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
                callback_data: 'cancelled',
              },
            ],
          ],
        },
      });

      logger.logBusiness('cancellation_message_sent', {
        approval_id,
        chat_id,
        message_id,
      });

      return {
        success: true,
        result,
      };
    } catch (error) {
      logger.logError(error, {
        context: 'sendCancellationMessage',
        cancellation_data: cancellationData,
      });
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –û—Ç–≤–µ—Ç –Ω–∞ callback query
  async answerCallbackQuery(callbackQueryId, text, showAlert = false) {
    try {
      const result = await bot.answerCallbackQuery(callbackQueryId, {
        text,
        show_alert: showAlert,
      });

      logger.debug('Callback query answered', {
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert,
        result,
      });

      return {
        success: true,
        result,
      };
    } catch (error) {
      logger.logError(error, {
        context: 'answerCallbackQuery',
        callback_query_id: callbackQueryId,
        text,
      });
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId, text, options = {}) {
    try {
      const result = await bot.sendMessage(chatId, text, {
        parse_mode: 'HTML',
        ...options,
      });

      logger.debug('Message sent', {
        chat_id: chatId,
        text: text.substring(0, 100), // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        message_id: result.message_id,
      });

      return {
        success: true,
        message_id: result.message_id,
        result,
      };
    } catch (error) {
      logger.logError(error, {
        context: 'sendMessage',
        chat_id: chatId,
        text: text.substring(0, 100),
      });
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º
  formatApprovalMessage({ document_title, document_url, message_text }) {
    return `üìã <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ</b>

üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç:</b> <a href="${document_url}">${document_title}</a>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message_text}

‚è∞ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</i>`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  formatUpdatedApprovalMessage({ approval_id, action, responder_name }) {
    const actionText = action === 'approve' ? '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
    return `üìã <b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

${actionText} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <b>${responder_name}</b>

üÜî <b>ID —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b> ${approval_id}

‚è∞ <i>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${new Date().toLocaleString('ru-RU')}</i>`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
  formatCancellationMessage({ approval_id }) {
    return `üìã <b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>

‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–º–µ–Ω–µ–Ω–æ

üÜî <b>ID —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b> ${approval_id}

‚è∞ <i>–í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: ${new Date().toLocaleString('ru-RU')}</i>`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  async validateToken(token) {
    try {
      const testBot = new TelegramBot(token, { polling: false });
      const info = await testBot.getMe();
      return {
        valid: true,
        bot_info: info,
      };
    } catch (error) {
      return {
        valid: false,
        error: error.message,
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
  async getBotStats() {
    try {
      const info = await this.getBotInfo();
      const webhookInfo = await this.getWebhookInfo();
      
      return {
        bot_info: info,
        webhook_info: webhookInfo,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      logger.logError(error, { context: 'getBotStats' });
      throw error;
    }
  }
}

module.exports = new TelegramService();
