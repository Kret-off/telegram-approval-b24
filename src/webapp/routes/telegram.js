const express = require('express');
const axios = require('axios');
const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
  next();
};

// Webhook –æ—Ç Telegram
router.post('/webhook', async (req, res) => {
  try {
    const { message, callback_query } = req.body;

    if (message) {
      await handleMessage(message);
    } else if (callback_query) {
      await handleCallbackQuery(callback_query);
    }

    res.json({ ok: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const { text, from, chat } = message;
  
  if (!text) return;

  const userId = from.id;
  const chatId = chat.id;
  const messageText = text.toLowerCase();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const activeApproval = await getActiveApproval(userId);
  
  if (!activeApproval) {
    await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π.');
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (messageText.includes('—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ') || messageText.includes('–æ–¥–æ–±—Ä–µ–Ω–æ') || messageText.includes('–¥–∞')) {
    await approveDocument(activeApproval.id, userId, text);
    await sendMessage(chatId, '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!');
  } else if (messageText.includes('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ') || messageText.includes('–Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ') || messageText.includes('–Ω–µ—Ç')) {
    await rejectDocument(activeApproval.id, userId, text);
    await sendMessage(chatId, '‚ùå –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!');
  } else {
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ" –∏–ª–∏ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ".');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(callbackQuery) {
  const { data, from, message } = callbackQuery;
  const userId = from.id;
  const chatId = message.chat.id;

  if (data.startsWith('approve_')) {
    const approvalId = data.split('_')[1];
    await approveDocument(approvalId, userId);
    await sendMessage(chatId, '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!');
  } else if (data.startsWith('reject_')) {
    const approvalId = data.split('_')[1];
    await rejectDocument(approvalId, userId);
    await sendMessage(chatId, '‚ùå –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!');
  } else if (data.startsWith('comment_')) {
    const approvalId = data.split('_')[1];
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤ Telegram
router.post('/send-approval', requireAuth, async (req, res) => {
  try {
    const { approvalId, approverId, message, taskId, dealId } = req.body;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data: `approve_${approvalId}` },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${approvalId}` }
        ],
        [
          { text: "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data: `comment_${approvalId}` }
        ]
      ]
    };

    const telegramMessage = `
üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ

${message}

üìÑ –ó–∞–¥–∞—á–∞: #${taskId}
${dealId ? `üìä –°–¥–µ–ª–∫–∞: #${dealId}` : ''}
‚è∞ –°—Ä–æ–∫: 24 —á–∞—Å–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;

    await sendMessageWithKeyboard(approverId, telegramMessage, keyboard);

    res.json({ success: true, message: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text) {
  try {
    await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async function sendMessageWithKeyboard(chatId, text, keyboard) {
  try {
    await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:', error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
async function getActiveApproval(userId) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  return {
    id: '1',
    title: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ',
    status: 'pending'
  };
}

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async function approveDocument(approvalId, userId, comment = '') {
  console.log(`–î–æ–∫—É–º–µ–Ω—Ç ${approvalId} –æ–¥–æ–±—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}: ${comment}`);
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ Bitrix24
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async function rejectDocument(approvalId, userId, comment = '') {
  console.log(`–î–æ–∫—É–º–µ–Ω—Ç ${approvalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}: ${comment}`);
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ Bitrix24
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
router.post('/setup-webhook', requireAuth, async (req, res) => {
  try {
    const webhookUrl = `${process.env.BACKEND_URL}/api/telegram/webhook`;
    
    const response = await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`, {
      url: webhookUrl,
      allowed_updates: ['message', 'callback_query'],
      drop_pending_updates: true
    });

    if (response.data.ok) {
      res.json({ 
        success: true, 
        message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        webhook_url: webhookUrl
      });
    } else {
      res.status(400).json({ error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
router.get('/webhook-info', requireAuth, async (req, res) => {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/test-message', requireAuth, async (req, res) => {
  try {
    const { chatId, message } = req.body;
    
    await sendMessage(chatId, message || '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram Approval Cloud');
    
    res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
});

module.exports = router;
