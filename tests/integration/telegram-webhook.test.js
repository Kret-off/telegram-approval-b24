const axios = require('axios');
const { expect } = require('chai');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
  backendUrl: process.env.BACKEND_URL || 'http://localhost:3000',
  telegramBotToken: process.env.TELEGRAM_BOT_TOKEN || 'test-bot-token',
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram webhook
function generateCallbackQueryData(approvalId, action = 'approve') {
  return {
    update_id: Date.now(),
    callback_query: {
      id: `callback-${Date.now()}`,
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Test',
        last_name: 'User',
        username: 'test_user',
        language_code: 'ru',
      },
      message: {
        message_id: 1,
        from: {
          id: 987654321,
          is_bot: true,
          first_name: 'TestBot',
          username: 'test_bot',
        },
        chat: {
          id: 123456789,
          first_name: 'Test',
          last_name: 'User',
          username: 'test_user',
          type: 'private',
        },
        date: Math.floor(Date.now() / 1000),
        text: 'üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ\n\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
                callback_data: `approve:${approvalId}`,
              },
              {
                text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                callback_data: `reject:${approvalId}`,
              },
            ],
          ],
        },
      },
      chat_instance: 'test-chat-instance',
      data: `${action}:${approvalId}`,
    },
  };
}

function generateTextMessageData(text = '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ') {
  return {
    update_id: Date.now(),
    message: {
      message_id: Date.now(),
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Test',
        last_name: 'User',
        username: 'test_user',
        language_code: 'ru',
      },
      chat: {
        id: 123456789,
        first_name: 'Test',
        last_name: 'User',
        username: 'test_user',
        type: 'private',
      },
      date: Math.floor(Date.now() / 1000),
      text: text,
    },
  };
}

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: Telegram Webhook', () => {
  const testApprovalId = `test-approval-${Date.now()}`;

  describe('POST /api/telegram/webhook', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è)', async () => {
      try {
        const webhookData = generateCallbackQueryData(testApprovalId, 'approve');

        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          webhookData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);

        console.log('‚úÖ Callback query —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error.response?.data || error.message);
        // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)', async () => {
      try {
        const webhookData = generateCallbackQueryData(testApprovalId, 'reject');

        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          webhookData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);

        console.log('‚úÖ Callback query –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"', async () => {
      try {
        const webhookData = generateTextMessageData('—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ');

        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          webhookData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);

        console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"', async () => {
      try {
        const webhookData = generateTextMessageData('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');

        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          webhookData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);

        console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π', async () => {
      try {
        const webhookData = {
          update_id: Date.now(),
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          unknown_field: 'test',
        };

        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          webhookData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);

        console.log('‚úÖ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }
    });
  });

  describe('GET /api/telegram/setup', () => {
    it('–¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è Telegram Bot', async () => {
      try {
        const response = await axios.get(`${config.backendUrl}/api/telegram/setup`, {
          timeout: 10000,
        });

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        expect(response.data).to.have.property('webhook_url');

        console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', response.data.webhook_url);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', error.response?.data || error.message);
        // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞)');
      }
    });
  });

  describe('GET /api/telegram/info', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ', async () => {
      try {
        const response = await axios.get(`${config.backendUrl}/api/telegram/info`, {
          timeout: 10000,
        });

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        expect(response.data).to.have.property('bot_info');

        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:', response.data.bot_info);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.response?.data || error.message);
        // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞)');
      }
    });
  });
});
