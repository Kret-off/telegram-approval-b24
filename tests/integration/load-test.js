const axios = require('axios');
const crypto = require('crypto');
const { expect } = require('chai');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
  backendUrl: process.env.BACKEND_URL || 'http://localhost:3000',
  backendSecret: process.env.BACKEND_SECRET || 'test-secret-key',
  bitrix24Portal: process.env.BITRIX24_PORTAL || 'https://test-portal.bitrix24.ru',
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
function generateSignature(data, secret) {
  const dataString = JSON.stringify(data);
  const timestamp = Math.floor(Date.now() / 1000);
  return crypto
    .createHmac('sha256', secret)
    .update(dataString + timestamp)
    .digest('hex');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestApprovalData(index) {
  const approvalId = `load-test-approval-${Date.now()}-${index}`;
  const timestamp = Math.floor(Date.now() / 1000);
  
  return {
    approval_id: approvalId,
    bitrix24_portal: config.bitrix24Portal,
    bitrix24_user_id: 100 + index,
    document_type: 'crm',
    document_id: 1000 + index,
    document_title: `–ù–∞–≥—Ä—É–∑–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞ #${index}`,
    document_url: `${config.bitrix24Portal}/crm/deal/details/${1000 + index}/`,
    message_text: `–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏ #${index}`,
    button_approve: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
    button_reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
    mode: 'single',
    timeout_hours: 24,
    approvers: [
      {
        bitrix24_user_id: 200 + index,
        telegram_username: `test_user_${index}`,
      },
    ],
    signature: '',
    timestamp: timestamp,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async function sendRequest(index) {
  const testData = generateTestApprovalData(index);
  testData.signature = generateSignature(testData, config.backendSecret);

  const startTime = Date.now();
  
  try {
    const response = await axios.post(
      `${config.backendUrl}/api/b24/notify`,
      testData,
      {
        headers: {
          'Content-Type': 'application/json',
          'X-Signature': testData.signature,
          'X-Timestamp': testData.timestamp,
        },
        timeout: 30000,
      }
    );

    const endTime = Date.now();
    const responseTime = endTime - startTime;

    return {
      success: true,
      status: response.status,
      responseTime,
      approvalId: testData.approval_id,
    };
  } catch (error) {
    const endTime = Date.now();
    const responseTime = endTime - startTime;

    return {
      success: false,
      status: error.response?.status || 0,
      responseTime,
      error: error.response?.data?.error || error.message,
      approvalId: testData.approval_id,
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function sendConcurrentRequests(count, delay = 0) {
  const promises = [];
  
  for (let i = 0; i < count; i++) {
    const promise = sendRequest(i);
    promises.push(promise);
    
    if (delay > 0 && i < count - 1) {
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  return Promise.all(promises);
}

describe('–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã', () => {
  describe('–û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 10 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const results = [];
      const startTime = Date.now();

      for (let i = 0; i < 10; i++) {
        const result = await sendRequest(i);
        results.push(result);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const failedRequests = results.filter(r => !r.success).length;
      const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);

      expect(successfulRequests).to.be.greaterThan(0);
      expect(avgResponseTime).to.be.lessThan(5000); // –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
    });
  });

  describe('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const startTime = Date.now();
      const results = await sendConcurrentRequests(5);
      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const failedRequests = results.filter(r => !r.success).length;
      const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (5):`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);

      expect(successfulRequests).to.be.greaterThan(0);
      expect(avgResponseTime).to.be.lessThan(10000); // –ú–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const startTime = Date.now();
      const results = await sendConcurrentRequests(10);
      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const failedRequests = results.filter(r => !r.success).length;
      const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (10):`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);

      expect(successfulRequests).to.be.greaterThan(0);
      expect(avgResponseTime).to.be.lessThan(15000); // –ú–µ–Ω–µ–µ 15 —Å–µ–∫—É–Ω–¥
    });
  });

  describe('–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 20 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 50ms', async () => {
      const startTime = Date.now();
      const results = await sendConcurrentRequests(20, 50);
      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const failedRequests = results.filter(r => !r.success).length;
      const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (20 –∑–∞–ø—Ä–æ—Å–æ–≤, 50ms –∑–∞–¥–µ—Ä–∂–∫–∞):`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);

      expect(successfulRequests).to.be.greaterThan(0);
      expect(avgResponseTime).to.be.lessThan(20000); // –ú–µ–Ω–µ–µ 20 —Å–µ–∫—É–Ω–¥
    });
  });

  describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö rate limit', async () => {
      const results = [];
      const startTime = Date.now();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
      for (let i = 0; i < 50; i++) {
        const result = await sendRequest(i);
        results.push(result);
      }

      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const rateLimitedRequests = results.filter(r => !r.success && r.status === 429).length;
      const otherFailedRequests = results.filter(r => !r.success && r.status !== 429).length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã rate limiting —Ç–µ—Å—Ç–∞:`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   Rate limited (429): ${rateLimitedRequests}`);
      console.log(`   –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: ${otherFailedRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç
      expect(rateLimitedRequests).to.be.greaterThan(0);
    });
  });

  describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ health check', () => {
    it('–¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ health check –∑–∞–ø—Ä–æ—Å—ã', async () => {
      const results = [];
      const startTime = Date.now();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 100 health check –∑–∞–ø—Ä–æ—Å–æ–≤
      for (let i = 0; i < 100; i++) {
        const requestStart = Date.now();
        
        try {
          const response = await axios.get(`${config.backendUrl}/health`, {
            timeout: 5000,
          });
          
          const requestEnd = Date.now();
          results.push({
            success: true,
            status: response.status,
            responseTime: requestEnd - requestStart,
          });
        } catch (error) {
          const requestEnd = Date.now();
          results.push({
            success: false,
            status: error.response?.status || 0,
            responseTime: requestEnd - requestStart,
            error: error.message,
          });
        }
      }

      const endTime = Date.now();
      const totalTime = endTime - startTime;

      const successfulRequests = results.filter(r => r.success).length;
      const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã health check —Ç–µ—Å—Ç–∞:`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.length}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);

      expect(successfulRequests).to.be.greaterThan(90); // 90% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      expect(avgResponseTime).to.be.lessThan(1000); // –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    });
  });
});
