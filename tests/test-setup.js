// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const chai = require('chai');
const sinon = require('sinon');
const sinonChai = require('sinon-chai');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chai
chai.use(sinonChai);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
global.expect = chai.expect;
global.sinon = sinon;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = 'test';

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (process.env.SUPPRESS_LOGS === 'true') {
  const originalConsoleLog = console.log;
  const originalConsoleError = console.error;
  const originalConsoleWarn = console.warn;
  
  console.log = () => {};
  console.error = () => {};
  console.warn = () => {};
  
  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
  after(() => {
    console.log = originalConsoleLog;
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
beforeEach(() => {
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–±–æ–≤ –∏ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
  sinon.restore();
});

afterEach(() => {
  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  sinon.restore();
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
global.testUtils = {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  generateTestData: (type = 'approval') => {
    const timestamp = Math.floor(Date.now() / 1000);
    
    switch (type) {
      case 'approval':
        return {
          approval_id: `test-approval-${timestamp}`,
          bitrix24_portal: 'https://test-portal.bitrix24.ru',
          bitrix24_user_id: 123,
          document_type: 'crm',
          document_id: 456,
          document_title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
          document_url: 'https://test-portal.bitrix24.ru/crm/deal/details/456/',
          message_text: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ',
          button_approve: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
          button_reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
          mode: 'single',
          timeout_hours: 24,
          approvers: [
            {
              bitrix24_user_id: 789,
              telegram_username: 'test_user',
            },
          ],
          timestamp: timestamp,
        };
      
      case 'telegram_message':
        return {
          update_id: timestamp,
          message: {
            message_id: timestamp,
            from: {
              id: 123456789,
              is_bot: false,
              first_name: 'Test',
              last_name: 'User',
              username: 'test_user',
              language_code: 'ru',
            },
            chat: {
              id: 123456789,
              first_name: 'Test',
              last_name: 'User',
              username: 'test_user',
              type: 'private',
            },
            date: timestamp,
            text: '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ',
          },
        };
      
      case 'callback_query':
        return {
          update_id: timestamp,
          callback_query: {
            id: `callback-${timestamp}`,
            from: {
              id: 123456789,
              is_bot: false,
              first_name: 'Test',
              last_name: 'User',
              username: 'test_user',
              language_code: 'ru',
            },
            message: {
              message_id: 1,
              from: {
                id: 987654321,
                is_bot: true,
                first_name: 'TestBot',
                username: 'test_bot',
              },
              chat: {
                id: 123456789,
                first_name: 'Test',
                last_name: 'User',
                username: 'test_user',
                type: 'private',
              },
              date: timestamp,
              text: 'üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
                      callback_data: 'approve:test-approval',
                    },
                    {
                      text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                      callback_data: 'reject:test-approval',
                    },
                  ],
                ],
              },
            },
            chat_instance: 'test-chat-instance',
            data: 'approve:test-approval',
          },
        };
      
      default:
        return {};
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
  generateSignature: (data, secret) => {
    const crypto = require('crypto');
    const dataString = JSON.stringify(data);
    const timestamp = Math.floor(Date.now() / 1000);
    return crypto
      .createHmac('sha256', secret)
      .update(dataString + timestamp)
      .digest('hex');
  },

  // –û–∂–∏–¥–∞–Ω–∏–µ
  wait: (ms) => new Promise(resolve => setTimeout(resolve, ms)),

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP –æ—Ç–≤–µ—Ç–∞
  expectHttpStatus: (response, expectedStatus) => {
    expect(response.status).to.equal(expectedStatus);
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON –æ—Ç–≤–µ—Ç–∞
  expectJsonStructure: (response, expectedStructure) => {
    expect(response.data).to.have.property('success');
    Object.keys(expectedStructure).forEach(key => {
      expect(response.data).to.have.property(key, expectedStructure[key]);
    });
  },

  // –ú–æ–∫ –¥–ª—è axios
  mockAxios: () => {
    const axios = require('axios');
    const axiosMock = sinon.stub(axios);
    
    // –ú–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    axiosMock.post.resolves({
      status: 200,
      data: { success: true },
    });
    
    axiosMock.get.resolves({
      status: 200,
      data: { success: true },
    });
    
    return axiosMock;
  },

  // –ú–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  mockDatabase: () => {
    const dbMock = {
      Approval: {
        create: sinon.stub(),
        findOne: sinon.stub(),
        update: sinon.stub(),
        destroy: sinon.stub(),
      },
      Approver: {
        create: sinon.stub(),
        findOne: sinon.stub(),
        update: sinon.stub(),
        destroy: sinon.stub(),
      },
      UserMapping: {
        create: sinon.stub(),
        findOne: sinon.stub(),
        update: sinon.stub(),
        destroy: sinon.stub(),
      },
    };
    
    return dbMock;
  },
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const originalTimeout = 30000;
const extendedTimeout = 60000;

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if (process.env.TEST_TYPE === 'integration' || process.env.TEST_TYPE === 'e2e') {
  this.timeout(extendedTimeout);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ç–µ—Å—Ç–∞—Ö
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
