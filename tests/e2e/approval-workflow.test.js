const axios = require('axios');
const crypto = require('crypto');
const { expect } = require('chai');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
  backendUrl: process.env.BACKEND_URL || 'http://localhost:3000',
  backendSecret: process.env.BACKEND_SECRET || 'test-secret-key',
  bitrix24Portal: process.env.BITRIX24_PORTAL || 'https://test-portal.bitrix24.ru',
  telegramBotToken: process.env.TELEGRAM_BOT_TOKEN || 'test-bot-token',
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
function generateSignature(data, secret) {
  const dataString = JSON.stringify(data);
  const timestamp = Math.floor(Date.now() / 1000);
  return crypto
    .createHmac('sha256', secret)
    .update(dataString + timestamp)
    .digest('hex');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateApprovalData() {
  const approvalId = `e2e-approval-${Date.now()}`;
  const timestamp = Math.floor(Date.now() / 1000);
  
  return {
    approval_id: approvalId,
    bitrix24_portal: config.bitrix24Portal,
    bitrix24_user_id: 123,
    document_type: 'crm',
    document_id: 456,
    document_title: 'E2E –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
    document_url: `${config.bitrix24Portal}/crm/deal/details/456/`,
    message_text: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ E2E —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏',
    button_approve: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
    button_reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
    mode: 'single',
    timeout_hours: 24,
    approvers: [
      {
        bitrix24_user_id: 789,
        telegram_username: 'e2e_test_user',
      },
    ],
    signature: '',
    timestamp: timestamp,
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram webhook
function generateTelegramResponse(approvalId, action = 'approve') {
  return {
    update_id: Date.now(),
    callback_query: {
      id: `e2e-callback-${Date.now()}`,
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'E2E',
        last_name: 'TestUser',
        username: 'e2e_test_user',
        language_code: 'ru',
      },
      message: {
        message_id: 1,
        from: {
          id: 987654321,
          is_bot: true,
          first_name: 'TestBot',
          username: 'test_bot',
        },
        chat: {
          id: 123456789,
          first_name: 'E2E',
          last_name: 'TestUser',
          username: 'e2e_test_user',
          type: 'private',
        },
        date: Math.floor(Date.now() / 1000),
        text: 'üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ\n\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç: E2E –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ E2E —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å',
                callback_data: `approve:${approvalId}`,
              },
              {
                text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                callback_data: `reject:${approvalId}`,
              },
            ],
          ],
        },
      },
      chat_instance: 'e2e-chat-instance',
      data: `${action}:${approvalId}`,
    },
  };
}

describe('E2E –¢–µ—Å—Ç—ã: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', () => {
  let approvalData;
  let approvalId;

  before(() => {
    approvalData = generateApprovalData();
    approvalId = approvalData.approval_id;
    approvalData.signature = generateSignature(approvalData, config.backendSecret);
  });

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è (approve)', async () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º E2E —Ç–µ—Å—Ç: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ');
      
      // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Activity
      console.log('üì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Activity...');
      let response;
      
      try {
        response = await axios.post(
          `${config.backendUrl}/api/b24/notify`,
          approvalData,
          {
            headers: {
              'Content-Type': 'application/json',
              'X-Signature': approvalData.signature,
              'X-Timestamp': approvalData.timestamp,
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        expect(response.data).to.have.property('approval_id', approvalId);
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }

      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
      console.log('üìä –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è...');
      
      try {
        response = await axios.get(
          `${config.backendUrl}/api/b24/status/${approvalId}`,
          {
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('approval_id', approvalId);
        expect(response.data).to.have.property('status', 'pending');
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω:', response.data.status);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data || error.message);
        throw error;
      }

      // –®–∞–≥ 3: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
      console.log('üì± –®–∞–≥ 3: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram...');
      
      try {
        const telegramData = generateTelegramResponse(approvalId, 'approve');
        
        response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          telegramData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }

      // –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      console.log('üîç –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...');
      
      try {
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        response = await axios.get(
          `${config.backendUrl}/api/b24/status/${approvalId}`,
          {
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('approval_id', approvalId);
        
        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω:', response.data);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data || error.message);
        throw error;
      }

      console.log('üéâ E2E —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    });
  });

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏', async () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º E2E —Ç–µ—Å—Ç: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      const rejectApprovalData = generateApprovalData();
      rejectApprovalData.signature = generateSignature(rejectApprovalData, config.backendSecret);
      const rejectApprovalId = rejectApprovalData.approval_id;
      
      // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('üì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Activity...');
      
      try {
        const response = await axios.post(
          `${config.backendUrl}/api/b24/notify`,
          rejectApprovalData,
          {
            headers: {
              'Content-Type': 'application/json',
              'X-Signature': rejectApprovalData.signature,
              'X-Timestamp': rejectApprovalData.timestamp,
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }

      // –®–∞–≥ 2: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ Telegram
      console.log('üì± –®–∞–≥ 2: –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ Telegram...');
      
      try {
        const telegramData = generateTelegramResponse(rejectApprovalId, 'reject');
        
        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          telegramData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);
        
        console.log('‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }

      console.log('üéâ E2E —Ç–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    });
  });

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π 3: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º E2E —Ç–µ—Å—Ç: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const textApprovalData = generateApprovalData();
      textApprovalData.signature = generateSignature(textApprovalData, config.backendSecret);
      
      // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('üì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      
      try {
        const response = await axios.post(
          `${config.backendUrl}/api/b24/notify`,
          textApprovalData,
          {
            headers: {
              'Content-Type': 'application/json',
              'X-Signature': textApprovalData.signature,
              'X-Timestamp': textApprovalData.timestamp,
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }

      // –®–∞–≥ 2: –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      console.log('üì± –®–∞–≥ 2: –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...');
      
      try {
        const textMessageData = {
          update_id: Date.now(),
          message: {
            message_id: Date.now(),
            from: {
              id: 123456789,
              is_bot: false,
              first_name: 'E2E',
              last_name: 'TextUser',
              username: 'e2e_text_user',
              language_code: 'ru',
            },
            chat: {
              id: 123456789,
              first_name: 'E2E',
              last_name: 'TextUser',
              username: 'e2e_text_user',
              type: 'private',
            },
            date: Math.floor(Date.now() / 1000),
            text: '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º',
          },
        };
        
        const response = await axios.post(
          `${config.backendUrl}/api/telegram/webhook`,
          textMessageData,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('ok', true);
        
        console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error.response?.data || error.message);
        console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ (–Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      }

      console.log('üéâ E2E —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    });
  });

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', async () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º E2E —Ç–µ—Å—Ç: –û—Ç–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω—ã
      const cancelApprovalData = generateApprovalData();
      cancelApprovalData.signature = generateSignature(cancelApprovalData, config.backendSecret);
      const cancelApprovalId = cancelApprovalData.approval_id;
      
      // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('üì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      
      try {
        const response = await axios.post(
          `${config.backendUrl}/api/b24/notify`,
          cancelApprovalData,
          {
            headers: {
              'Content-Type': 'application/json',
              'X-Signature': cancelApprovalData.signature,
              'X-Timestamp': cancelApprovalData.timestamp,
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }

      // –®–∞–≥ 2: –û—Ç–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
      console.log('‚ùå –®–∞–≥ 2: –û—Ç–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è...');
      
      try {
        const response = await axios.post(
          `${config.backendUrl}/api/b24/cancel/${cancelApprovalId}`,
          {},
          {
            headers: {
              'Content-Type': 'application/json',
              'X-Signature': generateSignature({}, config.backendSecret),
              'X-Timestamp': Math.floor(Date.now() / 1000),
            },
            timeout: 10000,
          }
        );

        expect(response.status).to.equal(200);
        expect(response.data).to.have.property('success', true);
        expect(response.data).to.have.property('status', 'cancelled');
        
        console.log('‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
        throw error;
      }

      console.log('üéâ E2E —Ç–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    });
  });
});
